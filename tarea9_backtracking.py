# -*- coding: utf-8 -*-
"""Tarea9_Backtracking.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H54FIlV50hwJ6UDCuUpsgA8CsMHjvz3x
"""

laberinto = [
    ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
    ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
    ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
    ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
    ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
    ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
    ['p', 'p', 'c', 'c', 'c', 'c', 'c', 'p'],
    ['p', 'p', 'c', 'p', 'p', 'p', 'c', 'p'],
    ['p', 'p', 'c', 'c', 'c', 'p', 'c', 'p'],
    ['p', 'p', 'p', 'p', 'c', 'p', 'c', 's'],
    ['p', 'p', 'X', 'p', 'c', 'p', 'p', 'p'],
    ['p', 'X', 'c', 'c', 'c', 'c', 'p', 'p'],
    ['p', 'p', 'c', 'p', 'p', 'p', 'p', 'p'],
    ['p', 'p', 'E', 'p', 'p', 'p', 'p', 'p'],
]

FILAS = len(laberinto)
COLUMNAS = len(laberinto[0])

entrada = (13, 2)

salida = (9, 7)

direcciones = [(-1, 0), (0, -1), (1, 0), (0, 1)]

def resolver_laberinto(x, y, camino):
    if (x, y) == salida:
        return True

    laberinto[x][y] = 'X'

    for dx, dy in direcciones:
        nx, ny = x + dx, y + dy

        if 0 <= nx < FILAS and 0 <= ny < COLUMNAS and laberinto[nx][ny] in ('c', 's'):
            camino.append((nx, ny))
            if resolver_laberinto(nx, ny, camino):
                return True

            camino.pop()

    laberinto[x][y] = 'c'
    return False

camino = [entrada]
if resolver_laberinto(entrada[0], entrada[1], camino):
    print("Camino encontrado:")
    for paso in camino:
        print(paso)
else:
    print("No se encontrÃ³ un camino a la salida.")